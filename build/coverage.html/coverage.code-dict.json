{"/home/travis/build/npmtest/node-npmtest-alfred-workflow-nodejs/test.js":"/* istanbul instrument in package npmtest_alfred_workflow_nodejs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-alfred-workflow-nodejs/lib.npmtest_alfred_workflow_nodejs.js":"/* istanbul instrument in package npmtest_alfred_workflow_nodejs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_alfred_workflow_nodejs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_alfred_workflow_nodejs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-alfred-workflow-nodejs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-alfred-workflow-nodejs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_alfred_workflow_nodejs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_alfred_workflow_nodejs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_alfred_workflow_nodejs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_alfred_workflow_nodejs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_alfred_workflow_nodejs.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_alfred_workflow_nodejs.__dirname +\n                    '/lib.npmtest_alfred_workflow_nodejs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-alfred-workflow-nodejs/node_modules/alfred-workflow-nodejs/alfredNode.js":"var exec = require('child_process').exec;\nvar _ = require('underscore');\nvar utils = require(\"util\");\n// === WorkFlow ===\n\nvar Workflow = (function() {\n    var _items = [];\n    var _name = \"AlfredWfNodeJs\";\n    var handlers = {};\n    var clearItems = function() {\n        _items = [];\n        clearItemsData();\n    };\n\n    var addItem = function(item) {\n        saveItemData(item);\n\n        if (item.hasSubItems) {\n            item.autocomplete = item.title + Utils.SUB_ACTION_SEPARATOR;\n        }\n\n        _items.push(item.feedback());\n    };\n\n    var feedback = function() {\n\n        var usage = Storage.get(\"usage\");\n        usage = usage || {};\n\n        _.each(_items, function(item) {\n            var title = item.title;\n            item.count = usage[title] ? (0 - usage[title]) : 0;\n        });\n\n        var sortedItems = _.sortBy(_items, \"count\");\n\n        _.each(sortedItems, function(item) {\n            delete item.count;\n        });\n\n        var ret = JSON.stringify({\n            items: sortedItems\n        });\n\n        console.log(ret);\n        return ret;\n    };\n\n    return {\n        /**\n         * Set workflow name\n         */\n        setName: function(name) {\n            _name = name;\n        },\n\n        /**\n         * Get workflow name\n         */\n        getName: function() {\n            return _name;\n        },\n\n        /**\n         * Add feedback item\n         */\n        addItem: addItem,\n\n        /**\n         * Clear all feedback items\n         */\n        clearItems: clearItems,\n\n        /**\n         * Generate feedbacks\n         */\n        feedback: feedback,\n\n        /**\n         * Generate info fedback\n         */\n        info: function(title, subtitle) {\n            clearItems();\n            addItem(new Item({\n                title: title,\n                subtitle: subtitle,\n                icon: ICONS.INFO\n            }));\n\n            return feedback();\n        },\n\n        /**\n         * Generate warning feedback\n         */\n        warning: function(title, subtitle) {\n            clearItems();\n            addItem(new Item({\n                title: title,\n                subtitle: subtitle,\n                icon: ICONS.WARNING\n            }));\n\n            return feedback();\n        },\n\n        /**\n         * Generate error feedback\n         */\n        error: function(title, subtitle) {\n            clearItems();\n            addItem(new Item({\n                title: title,\n                subtitle: subtitle,\n                icon: ICONS.ERROR\n            }));\n\n            return feedback();\n        }\n    };\n})();\n\n// === Action Handler ===\nvar ActionHandler = (function() {\n    var events = require('events');\n    var eventEmitter = new events.EventEmitter();\n    return {\n        /**\n         * Register action handler\n         */\n        onAction: function(action, handler) {\n            if (!action || !handler) {\n                return;\n            }\n            eventEmitter.on(\"action-\" + action, handler);\n        },\n\n        /**\n         * Register menu item selected handler\n         */\n        onMenuItemSelected: function(action, handler) {\n            if (!action || !handler) {\n                return;\n            }\n            eventEmitter.on(\"menuItemSelected-\" + action, handler);\n        },\n\n        /**\n         * Handle action by delegate to registered action/menuItem handlers\n         */\n        handle: function(action, query) {\n            if (!query || query.indexOf(Utils.SUB_ACTION_SEPARATOR) === -1) {\n                // handle action\n                eventEmitter.emit(\"action-\" + action, query);\n            } else {\n                // handle sub action\n                var tmp = query.split(Utils.SUB_ACTION_SEPARATOR);\n                var selectedItemTitle = tmp[0].trim();\n                query = tmp[1].trim();\n\n                saveUsage(query, selectedItemTitle);\n\n                eventEmitter.emit(\"menuItemSelected-\" + action, query, selectedItemTitle, getItemData(selectedItemTitle));\n            }\n        },\n\n        /**\n         * Unregister all action handlers\n         */\n        clear: function() {\n            eventEmitter.removeAllListeners();\n        }\n    };\n})();\n\n// === Feedback Item ===\nfunction Item(data) {\n    // ignore empty value\n    data = _removeEmptyProperties(data);\n\n    for (var key in data) {\n        this[key] = data[key];\n    }\n}\n\n/**\n * Generate feedback for a item\n */\nItem.prototype.feedback = function() {\n    this.arg = _updateArg(this.arg);\n\n    var item = _removeEmptyProperties({\n        \"uid\": this.uid,\n        \"arg\": this.arg,\n        \"valid\": this.valid === true ? \"YES\" : \"NO\",\n        \"autocomplete\": this.autocomplete,\n        \"title\": this.title,\n        \"subtitle\": this.subtitle,\n        \"type\": this.type,\n        \"icon\": {\n            \"path\": this.icon\n        },\n        \"quicklookurl\": this.quicklookurl,\n        \"text\": this.text,\n        \"mods\": this.mods\n    });\n\n    return item;\n};\n\n// === Storage\nvar Storage = (function() {\n    var storage = require('node-persist');\n    storage.initSync();\n\n    return {\n        set: function(key, value, ttl) {\n            var obj = {\n                data: value,\n                timestamp: new Date().getTime(),\n                ttl: ttl || -1\n            };\n\n            storage.setItemSync(key, obj);\n        },\n\n        get: function(key) {\n            var obj = storage.getItemSync(key);\n            if (obj) {\n                var ttl = obj.ttl;\n                var timestamp = obj.timestamp;\n                // if not ttl => return obj\n                if (ttl === -1) {\n                    return obj.data;\n                } else {\n                    // check ttl\n                    var now = new Date().getTime();\n                    if (now - timestamp < ttl) {\n                        return obj.data;\n                    } else {\n                        storage.removeItemSync(key, function() {});\n                    }\n                }\n            }\n        },\n\n        remove: function(key) {\n            if (storage.getItem(key)) {\n                storage.removeItemSync(key, function() {});\n            }\n        },\n\n        clear: function() {\n            storage.clearSync();\n        }\n    };\n})();\n\n// === Settings\nvar Settings = (function() {\n    var keychain = require('keychain');\n\n    return {\n        set: function(key, value) {\n            var settings = Storage.get(\"settings\");\n            settings = settings || {};\n            settings[key] = value;\n            Storage.set(\"settings\", settings);\n        },\n\n        get: function(key) {\n            var settings = Storage.get(\"settings\");\n            if (settings) {\n                return settings[key];\n            }\n        },\n\n        remove: function(key) {\n            var settings = Storage.get(\"settings\");\n            if (settings) {\n                delete settings[key];\n            }\n        },\n\n        clear: function() {\n            Storage.remove(\"settings\");\n        },\n\n        setPassword: function(username, password) {\n            keychain.setPassword({\n                account: username,\n                service: Workflow.getName(),\n                password: password\n            }, function(err) {\n                console.log(err);\n            });\n        },\n\n        getPassword: function(username, callback) {\n            keychain.getPassword({\n                account: username,\n                service: Workflow.getName()\n            }, callback);\n        }\n    };\n})();\n\n// === Utils\nvar Utils = (function() {\n    var fuzzy = require('fuzzy');\n    var applescript = require('node-osascript');\n    return {\n        SUB_ACTION_SEPARATOR: \" $>\",\n\n        filter: function(query, list, keyBuilder) {\n            if (!query) {\n                return list;\n            }\n\n            var options = {\n                extract: keyBuilder\n            };\n\n            return fuzzy.filter(query, list, options).map(function(item) {\n                return item.original;\n            });\n        },\n\n        /**\n         * a wrapper of \"applescript\" module\n         * @type {Object}\n         */\n        applescript: {\n            /**\n             * execute script\n             * @param script\n             * @param handler: function(err, result)\n             */\n            execute: function(script, handler) {\n                applescript.execute(script, handler);\n            },\n\n            /**\n             * execute script file\n             * @param path to script file\n             * @param variable variable\n             * @param handler: function(err, result, raw)\n             */\n            executeFile: function(path, varibale, handler) {\n                applescript.executeFile.apply(this, arguments);\n            }\n        },\n\n\n        /**\n         * @param data: {arg: 'xyz', variables: {key: value}}\n         * @return \n         *     string of '{\"alfredworkflow\": {\"arg\": \"xyz\", \"variables\": {\"key\": \"value\"}}}'\n         *     or data if data is not type of object\n         */\n        generateVars: function(data) {\n            var ret = _updateArg(data);\n            console.log(ret);\n            return ret;\n        },\n\n        envVars: {\n            /**\n             * Set enviroment variable\n             * if value is object => store as json string\n             */\n            set: function(key, value) {\n                if (key !== undefined && value !== undefined) {\n                    if (typeof value === 'object') {\n                        process.env.key = JSON.stringify(value);\n                    } else {\n                        process.env.key = value;\n                    }\n                }\n            },\n\n            /**\n             * Get enviroment variable\n             * if data is json => parse and return object\n             */\n            get: function(key) {\n                return _toObjectIfJSONString(process.env[key]);\n            }\n        },\n\n        wfVars: {\n            /**\n             * Set wf variable\n             * @param key variable name\n             * @param value variable value\n             * @param callback callback(err)\n             */\n            set: function(key, value, callback) {\n                if (key !== undefined && value !== undefined) {\n                    // set variable to plist\n                    var setCommand = utils.format('/usr/libexec/PlistBuddy -c \"Set :variables:%s \\\"%s\\\"\" info.plist', key, value);\n                    exec(setCommand, function(err, stdout, stderr) {\n                        // if variable is not in plist => add it to plist\n                        if (err) {\n                            var addCommand = utils.format('/usr/libexec/PlistBuddy -c \"Add :variables:%s string \\\"%s\\\"\" info.plist', key, value);\n                            exec(addCommand, function(err, stdout, stderr) {\n                                if (callback) {\n                                    callback(_toUndefinedIfNull(err));\n                                };\n                            });\n                        } else {\n                            if (callback) {\n                                callback(undefined);\n                            };\n                        }\n                    })\n                }\n            },\n\n            /**\n             * @param key variable name\n             * @param callback callback(err, value)\n             * @return wf variable\n             */\n            get: function(key, callback) {\n                var getCommand = utils.format('/usr/libexec/PlistBuddy -c \"Print :variables:%s\" info.plist', key);\n                exec(getCommand, function(err, stdout, stderr) {\n                    if (err) {\n                        callback(err);\n                    } else {\n                        var value = stdout.trim();\n                        callback(undefined, value);\n                    }\n\n                })\n            },\n\n            /**\n             * Remove a variable from wf variables\n             * @param key variable name\n             * @param callback callback(err)\n             */\n            remove: function(key, callback) {\n                var getCommand = utils.format('/usr/libexec/PlistBuddy -c \"Delete :variables:%s\" info.plist', key);\n                exec(getCommand, function(err, stdout, stderr) {\n                    if (callback) {\n                        callback(_toUndefinedIfNull(err));\n                    };\n                })\n            },\n\n            /**\n             * Use with caution!!!\n             * clear all workflow variables\n             * @param callback callback(err)\n             */\n            clear: function(callback) {\n                var clearCommand = '/usr/libexec/PlistBuddy -c \"Delete :variables\" info.plist';\n                exec(clearCommand, function(err, stdout, stderr) {\n                    if (callback) {\n                        callback(_toUndefinedIfNull(err))\n                    };\n                })\n            }\n        }\n\n    };\n})();\n\nvar ICONS = (function() {\n    // mac icons root folder\n    var ICON_ROOT = \"/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/\";\n\n    return {\n        ACCOUNT: ICON_ROOT + \"Accounts.icns\",\n        BURN: ICON_ROOT + \"BurningIcon.icns\",\n        CLOCK: ICON_ROOT + \"Clock.icns\",\n        COLOR: ICON_ROOT + \"ProfileBackgroundColor.icns\",\n        EJECT: ICON_ROOT + \"EjectMediaIcon.icns\",\n        ERROR: ICON_ROOT + \"AlertStopIcon.icns\",\n        FAVORITE: ICON_ROOT + \"ToolbarFavoritesIcon.icns\",\n        GROUP: ICON_ROOT + \"GroupIcon.icns\",\n        HELP: ICON_ROOT + \"HelpIcon.icns\",\n        HOME: ICON_ROOT + \"HomeFolderIcon.icns\",\n        INFO: ICON_ROOT + \"ToolbarInfo.icns\",\n        NETWORK: ICON_ROOT + \"GenericNetworkIcon.icns\",\n        NOTE: ICON_ROOT + \"AlertNoteIcon.icns\",\n        SETTINGS: ICON_ROOT + \"ToolbarAdvanced.icns\",\n        SWIRL: ICON_ROOT + \"ErasingIcon.icns\",\n        SWITCH: ICON_ROOT + \"General.icns\",\n        SYNC: ICON_ROOT + \"Sync.icns\",\n        TRASH: ICON_ROOT + \"TrashIcon.icns\",\n        USER: ICON_ROOT + \"UserIcon.icns\",\n        WARNING: ICON_ROOT + \"AlertCautionIcon.icns\",\n        WEB: ICON_ROOT + \"BookmarkIcon.icns\",\n    };\n})();\n\n// === private functions\nfunction _removeEmptyProperties(data) {\n    for (var key in data) {\n        var value = data[key];\n        if (typeof value === 'object') {\n            value = _removeEmptyProperties(value);\n            if (!Object.keys(value).length) {\n                value = null;\n            }\n        }\n        if (value === undefined || value === null) {\n            delete data[key];\n        }\n    }\n\n    return data;\n}\n\n// save item data into storage as \"item title\" => item data\nfunction saveItemData(item) {\n    if (item.data) {\n        var wfData = Storage.get(\"wfData\");\n        wfData = wfData || {};\n        wfData[item.title] = item.data;\n        Storage.set(\"wfData\", wfData);\n    }\n}\n\nfunction clearItemsData(item) {\n    Storage.remove(\"wfData\");\n}\n\nfunction getItemData(itemTitle) {\n    itemTitle = typeof itemTitle === \"string\" ? itemTitle.normalize() : itemTitle;\n    var wfData = Storage.get(\"wfData\");\n    return wfData ? wfData[itemTitle] : undefined;\n}\n\nfunction saveUsage(query, itemTitle) {\n    if (!query) {\n        var usage = Storage.get(\"usage\");\n        usage = usage || {};\n\n        var count = usage[itemTitle];\n        count = count || 0;\n        usage[itemTitle] = count + 1;\n\n        Storage.set(\"usage\", usage);\n    }\n}\n\nfunction _updateArg(data) {\n    if (typeof data === \"object\") {\n        var _arg = data.arg;\n        var _variables = data.variables;\n        return JSON.stringify({\n            alfredworkflow: {\n                arg: _arg,\n                variables: _variables\n            }\n        });\n    }\n\n    return data;\n}\n\nfunction _toUndefinedIfNull(x) {\n    return x === null ? undefined : x;\n}\n\n/**\n * If str is json string => return object\n * If not, return str\n */\nfunction _toObjectIfJSONString(str) {\n    try {\n        str = JSON.parse(str);\n    } catch (err) {\n\n    }\n\n    return str;\n}\n\n// module export\nmodule.exports = {\n    storage: Storage,\n    workflow: Workflow,\n    actionHandler: ActionHandler,\n    settings: Settings,\n    Item: Item,\n    utils: Utils,\n    ICONS: ICONS,\n    run: function() {\n        var action = process.argv[2];\n        var query = process.argv[3];\n        ActionHandler.handle(action, query);\n    }\n};"}